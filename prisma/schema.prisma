generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique
  name        String
  email       String   @unique
  phoneNumber String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  birthDay    DateTime?

  //address
  address Address[]
  orders  Order[]
  cart    Cart[]
  Payment Payment[]
}

model Address {
  id         String   @id @default(cuid())
  streetName String
  postOffice String
  zipCode    String
  district   String
  state      String
  isDefault  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Category {
  id   String  @id @default(cuid())
  name String
  slug String?

  product Product[]
}

model Product {
  id               String   @id @default(cuid())
  name             String
  price            Int
  inventoryCount   Int
  images           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  description      String
  shortDescription String
  slug             String

  //relation with Category
  Category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId String?
  CartItem   CartItem[]
  OrderItem  OrderItem[]

  @@index([categoryId])
  @@index([slug])
}

model Cart {
  id     String @id @default(cuid())
  User   User   @relation(fields: [userId], references: [id])
  userId String

  CartItem CartItem[]

  @@index([userId])
}

model CartItem {
  id        String      @id @default(cuid())
  cart      Cart        @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product     @relation(fields: [productId], references: [id])
  productId String
  addedAt   DateTime    @default(now())
  quantity  Int
  status    StockStatus

  @@index([cartId])
  @@index([productId])
}

model Order {
  id          String   @id @default(cuid())
  totalAmount BigInt
  status      Status
  createdAt   DateTime @default(now())

  User      User        @relation(fields: [userId], references: [id])
  userId    String
  Payment   Payment[]
  OrderItem OrderItem[]

  @@index([userId])
}

model OrderItem {
  id          String        @id @default(cuid())
  order       Order         @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product       @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  unitPrice   Int
  giftMessage GiftMessage[]

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  paymentId     String
  amount        Int
  currency      Currency
  PaymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Order         Order         @relation(fields: [orderId], references: [id])
  orderId       String

  @@index([userId])
  @@index([orderId])
}

model GiftMessage {
  id          String    @id @default(cuid())
  message     String
  OrderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String
}

enum StockStatus {
  OUT
  IN
}

enum PaymentStatus {
  PENDING
  PROCESS
  DONE
}

enum Status {
  DRAFT
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Currency {
  DOLLAR
  RUPEE
  EURO
}
