generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String
  name        String
  email       String
  phoneNumber String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  birthDay    DateTime

  //address
  address  Address[]
  orders   Order[]
  cart     Cart[]
  Payement Payement[]
}

model Address {
  id         String   @id @default(cuid())
  streetName String
  postOffice String
  zipCode    String
  District   String
  State      String
  isDefault  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Category {
  id        String  @id @default(cuid())
  name      String
  slug      String?
  productId String?

  product Product[]
}

model Product {
  id               String   @id @default(cuid())
  name             String
  price            Int
  inventoryCount   Int
  images           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  description      String
  shortDescription String
  slug             String

  //relation with Category
  Category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId String?
  CartItem   CartItem[]
  OrderItem  OrderItem[]
}

model Cart {
  id     String  @id @default(cuid())
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  CartItem CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  addedAt   DateTime @default(now())
  quantity  Int
}

model Order {
  id          String      @id @default(cuid())
  totalAmount BigInt
  status      Status
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
  PayementId  String
  Payement    Payement[]
  OrderItem   OrderItem[]
}

model OrderItem {
  id          String        @id @default(cuid())
  order       Order         @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product       @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  unitPrice   Int
  giftMessage GiftMessage[]
}

model Payement {
  id             String         @id @default(cuid())
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  PayementId     String
  amount         Int
  currency       Currency
  PayementStatus PayementStatus
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Order          Order          @relation(fields: [orderId], references: [id])
  orderId        String
}

model GiftMessage {
  id          String     @id @default(cuid())
  message     String
  OrderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
  orderItemId String?
}

enum PayementStatus {
  PENDING
  PROCESS
  DONE
}

enum Status {
  DRAFT
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Currency {
  DOLLAR
  RUPEE
  EURO
}
